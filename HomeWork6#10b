using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Game game = new Game();
            game.Play();
        }
    }

    abstract class Warrior
    {
        protected int DamageMin;
        protected int DamageMax;
        protected Random Random = new Random();
        protected int ErrorRate = 1;

        public string Name { get; protected set; }
        public int Attack { get; protected set; }
        public int Defense { get; protected set; }
        public int Damage { get; protected set; }
        public int Health { get; protected set; }
        public int HealthCurrent { get; protected set; }
        public int Group { get; protected set; }
        public int Speed { get; protected set; }
        public bool IsMove { get; protected set; }
        public bool IsResponseAttack { get; protected set; }

        public void Refresh()
        {
            IsMove = true;
            IsResponseAttack = true;
        }

        public virtual void TakeDammage(int damage)
        {
            if (HealthCurrent < damage)
            {
                while (damage > HealthCurrent)
                {
                    damage -= HealthCurrent;
                    Group--;
                    HealthCurrent = Health;
                }

                HealthCurrent -= damage;

                if (HealthCurrent == 0)
                {
                    Group--;
                    HealthCurrent = Health;
                }

                if (Group > 0)
                {
                    Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
                }
            }
        }

        public Warrior ChooseGoal(Army army)
        {
            Random random = new Random();

            for (int i = 0; i < army.GetCountWarrior(); i++)
            {
                int indexWarriorRandom = random.Next(army.GetCountWarrior());
                Warrior warriorGoal = army.GetWarrior(indexWarriorRandom);
                Console.WriteLine($"враг обнаружен - {warriorGoal.Name}");
                return warriorGoal;
            }

            return null;
        }

        public virtual void RespondToAttack(Warrior warrior)
        {
            if (IsResponseAttack)
            {
                int halfDamage = 2;
                int tempDamage = CalculateDamage() / halfDamage;
                Console.WriteLine($"боец {Name} наносит ответную атаку {tempDamage}");
                warrior.TakeDammage(tempDamage);
                IsResponseAttack = false;
            }
        }

        public virtual void AttackGoal(Warrior warriorDefiens)
        {
            int tempDamage = CalculateDamage();
            Console.WriteLine($"боец {Name} наносит {tempDamage} урона");
            warriorDefiens.TakeDammage(tempDamage);
            IsMove = false;
        }

        public void ShowInformation()
        {
            Console.WriteLine($"боец {Name},урон {CalculateDamage()}, атака - {Attack}, защита - {Defense}, здоровье - {Health}, численность - {Group} , скорость - {Speed}");
        }

        private int CalculateDamage()
        {
            if (DamageMin != 0 && DamageMax != 0)
                return Random.Next(DamageMin, DamageMax + ErrorRate) * Group + Attack;
            else
                return Damage * Group + Attack;
        }
    }

    class Army
    {
        protected List<Warrior> Warriors = new List<Warrior>();

        public void DeathGroup(Warrior warriorSearch)
        {
            Console.WriteLine($"группа {warriorSearch.Name} погибла");
            Warriors.Remove(warriorSearch);
        }

        public int GetCountWarrior()
        {
            return Warriors.Count;
        }

        public Warrior GetWarrior(int index)
        {
            if (Warriors.Count > 0)
                return Warriors[index];

            return null;
        }

        public bool IsDeterminateWarrior(Warrior warrior)
        {
            if (warrior != null)
            {
                if (Warriors.Contains(warrior))
                    return true;
            }

            return false;
        }

        public void ShowInformation()
        {
            foreach (Warrior warrior in Warriors)
            {
                warrior.ShowInformation();
            }
        }

        public void RefreshStats()
        {
            foreach (Warrior warrior in Warriors)
            {
                warrior.Refresh();
            }
        }

        public Warrior SearchFastest()
        {
            Warrior tempWarrior = null;
            int tempMaxSpeed = 0;

            foreach (Warrior warrior in Warriors)
            {
                if (warrior.IsMove == true && warrior.Speed > tempMaxSpeed)
                {
                    tempWarrior = warrior;
                    tempMaxSpeed = warrior.Speed;
                }
            }

            return tempWarrior;
        }
    }

    class Castle : Army
{
        public Castle()
        {
            Warriors.Add(new Halberdier());
            Warriors.Add(new Marksmen());
            Warriors.Add(new RoyalGriffin());
            Warriors.Add(new Crusader());
            Warriors.Add(new Zealot());
            Warriors.Add(new Champion());
            Warriors.Add(new Archangel());
        }
    }

    class Halberdier : Warrior
    {
        public Halberdier()
        {
            Name = "алебардщики";
            Attack = 6;
            Defense = 5;
            Group = 42;
            HealthCurrent = 10;
            Health = 10;
            DamageMin = 2;
            DamageMax = 3;
            Speed = 5;
        }
    }

    class Marksmen : Warrior
    {
        public Marksmen()
        {
            Name = "стрелки";
            Attack = 6;
            Defense = 3;
            DamageMin = 2;
            DamageMax = 3;
            Group = 27;
            HealthCurrent = 10;
            Health = 10;
            Speed = 6;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int bonus = 3;
            base.AttackGoal(warriorDefiens);
            Defense += bonus;
        }
    }

    class RoyalGriffin : Warrior
    {
        public RoyalGriffin()
        {
            Name = "королевские гриффоны";
            Attack = 9;
            Defense = 9;
            DamageMin = 3;
            DamageMax = 6;
            Group = 25;
            HealthCurrent = 25;
            Health = 25;
            Speed = 9;
        }

        public override void RespondToAttack(Warrior warrior)
        {
            IsResponseAttack = true;
            base.RespondToAttack(warrior);
        }
    }

    class Crusader : Warrior
    {
        public Crusader()
        {
            Name = "крестоносцы";
            Attack = 9;
            Defense = 9;
            DamageMin = 3;
            DamageMax = 6;
            Group = 12;
            HealthCurrent = 25;
            Health = 25;
            Speed = 9;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            base.AttackGoal(warriorDefiens);

            if (warriorDefiens.HealthCurrent > 0)
                base.AttackGoal(warriorDefiens);
        }
    }

    class Zealot : Warrior
    {
        public Zealot()
        {
            Name = "фанатики";
            Attack = 12;
            Defense = 10;
            DamageMin = 10;
            DamageMax = 12;
            Group = 9;
            HealthCurrent = 30;
            Health = 30;
            Speed = 7;
        }

        public override void TakeDammage(int damage)
        {
            int bonus = 10;
            base.TakeDammage(damage);
            HealthCurrent += bonus;
        }
    }

    class Champion : Warrior
    {
        public Champion()
        {
            Name = "чемпионы";
            Attack = 16;
            Defense = 16;
            DamageMin = 20;
            DamageMax = 25;
            Group = 6;
            HealthCurrent = 100;
            Health = 100;
            Speed = 9;
        }
    }

    class Archangel : Warrior
    {
        public Archangel()
        {
            Name = "архангелы";
            Attack = 30;
            Defense = 30;
            Damage = 50;
            Group = 3;
            HealthCurrent = 250;
            Health = 250;
            Speed = 18;
        }

        public override void TakeDammage(int damage)
        {
            if (HealthCurrent + Defense > damage)
            {
                HealthCurrent -= Random.Next(damage);
            }
            else
            {
                if (Group > 0)
                {
                    HealthCurrent -= damage;

                    if (HealthCurrent <= 0)
                    {
                        Group--;
                        HealthCurrent += Health;
                    }
                }
                else
                {
                    Group = 0;
                }
            }

            Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
        }
    }

    class Necropolise : Army
    {
        public Necropolise()
        {
            Warriors.Add(new SkeletonWarrior());
            Warriors.Add(new Zombie());
            Warriors.Add(new Wraith());
            Warriors.Add(new VampireLord());
            Warriors.Add(new PowerLiche());
            Warriors.Add(new DreadKnight());
            Warriors.Add(new GhostDragons());
        }
    }

    class SkeletonWarrior : Warrior
    {
        public SkeletonWarrior()
        {
            Name = "скелеты войны";
            Attack = 6;
            Defense = 6;
            DamageMin = 1;
            DamageMax = 3;
            Group = 45;
            HealthCurrent = 6;
            Health = 6;
            Speed = 5;
        }
    }

    class Zombie : Warrior
    {
        public Zombie()
        {
            Name = "зомби";
            Attack = 5;
            Defense = 5;
            DamageMin = 2;
            DamageMax = 3;
            Group = 24;
            HealthCurrent = 20;
            Health = 20;
            Speed = 4;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            warriorDefiens.TakeDammage(Attack + Random.Next(DamageMin, DamageMax) + HealthCurrent);
            IsMove = false;
        }
    }

    class Wraith : Warrior
    {
        public Wraith()
        {
            Name = "призраки";
            Attack = 7;
            Defense = 7;
            DamageMin = 3;
            DamageMax = 5;
            Group = 21;
            HealthCurrent = 18;
            Health = 18;
            Speed = 7;
        }

        public override void RespondToAttack(Warrior warrior)
        {
            int bonus = 3;
            base.RespondToAttack(warrior);
            DamageMax += bonus;
        }
    }

    class VampireLord : Warrior
    {
        public VampireLord()
        {
            Name = "вампиры лорды";
            Attack = 10;
            Defense = 10;
            DamageMin = 5;
            DamageMax = 8;
            Group = 12;
            HealthCurrent = 40;
            Health = 40;
            Speed = 9;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            base.AttackGoal(warriorDefiens);
            HealthCurrent += Random.Next(DamageMin, DamageMax);

            while (HealthCurrent > Health)
            {
                Group++;
                HealthCurrent -= Health;
            }
        }
    }

    class PowerLiche : Warrior
    {
        public PowerLiche()
        {
            Name = "могущественные личи";
            Attack = 13;
            Defense = 10;
            DamageMin = 11;
            DamageMax = 15;
            Group = 9;
            HealthCurrent = 40;
            Health = 40;
            Speed = 7;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int bonus = 5;
            base.AttackGoal(warriorDefiens);
            Attack += bonus;
        }
    }

    class DreadKnight : Warrior
    {
        public DreadKnight()
        {
            Name = "рыцари смерти";
            Attack = 18;
            Defense = 18;
            DamageMin = 15;
            DamageMax = 30;
            Group = 6;
            HealthCurrent = 120;
            Health = 120;
            Speed = 9;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int tempAttack = Attack;
            Attack += Random.Next(Attack + DamageMax);
            Attack = tempAttack;
            base.AttackGoal(warriorDefiens);
        }
    }

    class GhostDragons : Warrior
    {
        public GhostDragons()
        {
            Name = "драконы призраки";
            Attack = 19;
            Defense = 17;
            DamageMin = 25;
            DamageMax = 50;
            Group = 3;
            HealthCurrent = 200;
            Health = 200;
            Speed = 14;
        }

        public override void TakeDammage(int damage)
        {
            if (Group > 0)
            {
                if (HealthCurrent > damage)
                {
                    HealthCurrent -= damage - Defense;
                }
                else
                {
                    Group--;
                    HealthCurrent = Health;
                }

                Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
            }
            else
            {
                Group = 0;
                HealthCurrent = 0;
            }
        }
    }

    class Game
    {
        private Castle _castle = new Castle();
        private Necropolise _necropolise = new Necropolise();

        public void Play()
        {
            int countRound = 1;
            _castle.ShowInformation();
            Console.WriteLine();
            _necropolise.ShowInformation();
            Console.WriteLine("нажмите любую клавишу, чтобы начать сражение");
            Console.ReadLine();
            Console.Clear();

            while (CanFinishFight() == false)
            {
                Console.WriteLine($"раунд - {countRound++}");
                Round();
            }
        }

        private Army DetermineDefenseArmy(Warrior warriorAttack)
        {
            if (_castle.IsDeterminateWarrior(warriorAttack))
            {
                return _necropolise;
            }
            else if (_necropolise.IsDeterminateWarrior(warriorAttack))
            {
                return _castle;
            }

            return null;
        }

        private void Round()
        {
            _castle.RefreshStats();
            _necropolise.RefreshStats();
            bool isPlaying = true;

            while (isPlaying)
            {
                Warrior warriorAttack = SearchFastest();
                
                if (warriorAttack != null)
                {
                    Army armyDefense = DetermineDefenseArmy(warriorAttack);

                    if (armyDefense != null)
                    {
                        Warrior warriorDefense = warriorAttack.ChooseGoal(armyDefense);

                        if (warriorDefense != null)
                        {
                            warriorAttack.AttackGoal(warriorDefense);

                            if (warriorDefense.Group > 0)
                            {
                                warriorDefense.RespondToAttack(warriorAttack);

                                if (warriorAttack.Group <= 0)
                                {
                                    Murder(warriorAttack);
                                }
                            }
                            else
                            {
                                Murder(warriorDefense);
                            }
                        }
                        else
                        {
                            isPlaying = false;
                        }
                    }
                    else
                    {
                        isPlaying = false;
                    }
                }
                else
                {
                    isPlaying = false;
                }

                Console.ReadLine();
                Console.Clear();
            }
        }

        private void Murder(Warrior warriorSearch)
        {
            if (_castle.IsDeterminateWarrior(warriorSearch))
                _castle.DeathGroup(warriorSearch);
            else
                _necropolise.DeathGroup(warriorSearch);
        }

        private Warrior SearchFastest()
        {
            Warrior warriorFirst = _castle.SearchFastest();
            Warrior warriorSecond = _necropolise.SearchFastest();
            Warrior tempWarrior = null;

            if (warriorFirst != null)
            {
                if (warriorSecond != null)
                {
                    if (warriorFirst.Speed >= warriorSecond.Speed)
                    {
                        tempWarrior = warriorFirst;
                    }
                    else
                    {
                        tempWarrior = warriorSecond;
                    }
                }
                else
                {
                    tempWarrior = warriorFirst;
                }
            }
            else
            {
                if (warriorSecond != null)
                {
                    tempWarrior = warriorSecond;
                }
            }

            if (tempWarrior != null)
            {
                Console.WriteLine($"ход - {tempWarrior.Name}");
            }

            return tempWarrior;
        }

        private bool CanFinishFight()
        {
            Console.WriteLine($"в армии замка осталось: {_castle.GetCountWarrior()}"); ;
            Console.WriteLine($"в армии некрополиса осталось: {_necropolise.GetCountWarrior()}");

            if (_castle.GetCountWarrior() == 0)
            {
                Console.WriteLine("некрополис победил");
                return true;
            }
            else if (_necropolise.GetCountWarrior() == 0)
            {
                Console.WriteLine("замок победил");
                return true;
            }

            return false;
        }
    }
}


