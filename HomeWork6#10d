using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Game game = new Game();
            game.Play();
        }
    }

    abstract class Warrior
    {
        protected Random Random = new Random();
        protected int Tolerance = 1;

        public string Name { get; protected set; }
        public int Attack { get; protected set; }
        public int Defense { get; protected set; }
        public int Damage { get; protected set; }
        public int HealthMax { get; protected set; }
        public int HealthCurrent { get; protected set; }
        public int Group { get; protected set; }

        public virtual void TakeDammage(int damage)
        {
            if (HealthCurrent < damage)
            {
                while (damage > HealthCurrent)
                {
                    damage -= HealthCurrent;
                    Group--;
                    HealthCurrent = HealthMax;
                }

                HealthCurrent -= damage;

                if (HealthCurrent == 0)
                {
                    Group--;
                    HealthCurrent = HealthMax;
                }

                if (Group > 0)
                {
                    Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
                }
            }
        }

        public virtual void AttackGoal(Warrior warriorDefiens)
        {
            int tempDamage = CalculateDamage();
            Console.WriteLine($"боец {Name} наносит {tempDamage} урона");
            warriorDefiens.TakeDammage(tempDamage);
        }

        public void ShowInformation()
        {
            Console.WriteLine($"боец {Name},урон {CalculateDamage()}, атака - {Attack}, защита - {Defense}, здоровье - {HealthMax}, численность - {Group}");
        }

        private int CalculateDamage()
        {
            return Random.Next(Damage - Tolerance, Damage + Tolerance) * Group + Attack;
        }
    }

    class Halberdier : Warrior
    {
        public Halberdier()
        {
            Name = "алебардщики";
            Attack = 6;
            Damage = 2;
            Defense = 5;
            Group = 42;
            HealthCurrent = 10;
            HealthMax = 10;
        }
    }

    class Marksmen : Warrior
    {
        public Marksmen()
        {
            Name = "стрелки";
            Attack = 6;
            Defense = 3;
            Damage = 4;
            Group = 27;
            HealthCurrent = 10;
            HealthMax = 10;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int bonus = 3;
            base.AttackGoal(warriorDefiens);
            Defense += bonus;
        }
    }

    class RoyalGriffin : Warrior
    {
        public RoyalGriffin()
        {
            Name = "королевские гриффоны";
            Attack = 9;
            Defense = 9;
            Damage = 6;
            Group = 25;
            HealthCurrent = 25;
            HealthMax = 25;
        }
    }

    class Crusader : Warrior
    {
        public Crusader()
        {
            Name = "крестоносцы";
            Attack = 9;
            Defense = 9;
            Damage = 10;
            Group = 12;
            HealthCurrent = 25;
            HealthMax = 25;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            base.AttackGoal(warriorDefiens);

            if (warriorDefiens.HealthCurrent > 0)
                base.AttackGoal(warriorDefiens);
        }
    }

    class Zealot : Warrior
    {
        public Zealot()
        {
            Name = "фанатики";
            Attack = 12;
            Defense = 10;
            Damage = 13;
            Group = 9;
            HealthCurrent = 30;
            HealthMax = 30;
        }

        public override void TakeDammage(int damage)
        {
            int bonus = 10;
            base.TakeDammage(damage);
            HealthCurrent += bonus;
        }
    }

    class Champion : Warrior
    {
        public Champion()
        {
            Name = "чемпионы";
            Attack = 16;
            Defense = 16;
            Damage = 30;
            Group = 6;
            HealthCurrent = 100;
            HealthMax = 100;
        }
    }

    class Archangel : Warrior
    {
        public Archangel()
        {
            Name = "архангелы";
            Attack = 30;
            Defense = 30;
            Damage = 50;
            Group = 3;
            HealthCurrent = 250;
            HealthMax = 250;
        }

        public override void TakeDammage(int damage)
        {
            if (HealthCurrent + Defense > damage)
            {
                HealthCurrent -= Random.Next(damage);
            }
            else
            {
                if (Group > 0)
                {
                    HealthCurrent -= damage;

                    if (HealthCurrent <= 0)
                    {
                        Group--;
                        HealthCurrent += HealthMax;
                    }
                }
                else
                {
                    Group = 0;
                }
            }

            Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
        }
    }

    class SkeletonWarrior : Warrior
    {
        public SkeletonWarrior()
        {
            Name = "скелеты войны";
            Attack = 6;
            Defense = 6;
            Damage = 2;
            Group = 45;
            HealthCurrent = 6;
            HealthMax = 6;
        }
    }

    class Zombie : Warrior
    {
        public Zombie()
        {
            Name = "зомби";
            Attack = 5;
            Defense = 5;
            Group = 24;
            Damage = 4;
            HealthCurrent = 20;
            HealthMax = 20;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            warriorDefiens.TakeDammage(Attack + Random.Next(Damage) + HealthCurrent);
        }
    }

    class Wraith : Warrior
    {
        public Wraith()
        {
            Name = "призраки";
            Attack = 7;
            Defense = 7;
            Damage = 4;
            Group = 21;
            HealthCurrent = 18;
            HealthMax = 18;
        }
    }

    class VampireLord : Warrior
    {
        public VampireLord()
        {
            Name = "вампиры лорды";
            Attack = 10;
            Defense = 10;
            Group = 12;
            Damage = 12;
            HealthCurrent = 40;
            HealthMax = 40;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            base.AttackGoal(warriorDefiens);
            HealthCurrent += Random.Next(Damage);

            while (HealthCurrent > HealthMax)
            {
                Group++;
                HealthCurrent -= HealthMax;
            }
        }
    }

    class PowerLiche : Warrior
    {
        public PowerLiche()
        {
            Name = "могущественные личи";
            Attack = 13;
            Defense = 10;
            Group = 9;
            Damage = 15;
            HealthCurrent = 40;
            HealthMax = 40;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int bonus = 5;
            base.AttackGoal(warriorDefiens);
            Attack += bonus;
        }
    }

    class DreadKnight : Warrior
    {
        public DreadKnight()
        {
            Name = "рыцари смерти";
            Attack = 18;
            Defense = 18;
            Group = 6;
            Damage = 25;
            HealthCurrent = 120;
            HealthMax = 120;
        }

        public override void AttackGoal(Warrior warriorDefiens)
        {
            int tempAttack = Attack;
            Attack += Random.Next(Attack + Damage);
            base.AttackGoal(warriorDefiens);
            Attack = tempAttack;
        }
    }

    class GhostDragons : Warrior
    {
        public GhostDragons()
        {
            Name = "драконы призраки";
            Attack = 19;
            Defense = 17;
            Damage = 40;
            Group = 3;
            HealthCurrent = 200;
            HealthMax = 200;
        }

        public override void TakeDammage(int damage)
        {
            if (Group > 0)
            {
                if (HealthCurrent > damage)
                {
                    HealthCurrent -= damage - Defense;
                }
                else
                {
                    Group--;
                    HealthCurrent = HealthMax;
                }

                Console.WriteLine($"боец {Name} осталось в отряде {Group},{HealthCurrent} здоровья у последнего в отряде");
            }
            else
            {
                Group = 0;
                HealthCurrent = 0;
            }
        }
    }

    class Game
    {
        private static Random _random = new Random();
        private List<Warrior> _castle = new List<Warrior>();
        private List<Warrior> _necropolise = new List<Warrior>();

        public Game()
        {
            FillArmyCastle();
            FillArmyNecropolis();
        }

        public void Play()
        {
            int countRound = 1;
            ShowInformation(_castle);
            Console.WriteLine();
            ShowInformation(_necropolise);
            Console.WriteLine("нажмите любую клавишу, чтобы начать сражение");
            Console.ReadLine();
            Console.Clear();

            while (CanFinishFight() == false)
            {
                Console.WriteLine($"раунд - {countRound++}");
                Round();
            }
        }

        private void Round()
        {
            
            Warrior warriorAttack;
            Warrior warriorDefense;

            if (TryGetWarrior(_necropolise, out warriorAttack) == true && TryGetWarrior(_castle, out warriorDefense) == true)
            {
                warriorAttack.AttackGoal(warriorDefense);

                if (warriorDefense.Group > 0)
                {
                    warriorDefense.AttackGoal(warriorAttack);

                    if (warriorAttack.Group < 0)
                    {
                        MurderGroup(warriorAttack);
                    }
                }
                else
                {
                    MurderGroup(warriorDefense);
                }
            }

            Console.ReadLine();
            Console.Clear();
        }

        private bool TryGetWarrior(List<Warrior> warriors, out Warrior warrior)
        {
            Warrior tempWarrior = warriors[_random.Next(warriors.Count)];

            if (tempWarrior != null)
            {
                warrior = tempWarrior;
                return true;
            }

            warrior = null;
            return false;
        }

        private void MurderGroup(Warrior warriorSearch)
        {
            Console.WriteLine($"группа {warriorSearch.Name} погибла");

            if (_castle.Contains(warriorSearch))
                _castle.Remove(warriorSearch);
            else
                _necropolise.Remove(warriorSearch);
        }

        private bool CanFinishFight()
        {
            Console.WriteLine($"в армии замка осталось: {_castle.Count}"); ;
            Console.WriteLine($"в армии некрополиса осталось: {_necropolise.Count}");

            if (_castle.Count == 0)
            {
                Console.WriteLine("некрополис победил");
                return true;
            }
            else if (_necropolise.Count == 0)
            {
                Console.WriteLine("замок победил");
                return true;
            }

            return false;
        }

        private void ShowInformation(List<Warrior> warriors)
        {
            foreach (Warrior warrior in warriors)
            {
                warrior.ShowInformation();
            }
        }

        private void FillArmyCastle()
        {
            Warrior[] warriors = new Warrior[7]
            {
                new Halberdier(),
                new Marksmen(),
                new RoyalGriffin(),
                new Crusader(),
                new Zealot(),
                new Champion(),
                new Archangel()
            };

            foreach (Warrior warrior in warriors)
            {
                _castle.Add(warrior);
            }
        }

        private void FillArmyNecropolis()
        {
            Warrior[] warriors = new Warrior[7]
            {
                new SkeletonWarrior(),
                new Zombie(),
                new Wraith(),
                new VampireLord(),
                new PowerLiche(),
                new DreadKnight(),
                new GhostDragons()
            };

            foreach (Warrior warrior in warriors)
            {
                _necropolise.Add(warrior);
            }
        }
    }
}
