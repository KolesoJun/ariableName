using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            AutoService autoService = new AutoService();
            autoService.Work();
        }
    }

    class Client
    {
        private Random _random = new Random();

        public Client()
        {
            int moneyRandomMin = 2000;
            int moneyRandomMax = 150000;
            Money = _random.Next(moneyRandomMin, moneyRandomMax);
            Car = new Car();
        }

        public Car Car { get; private set; }
        public int Money { get; private set; }

        public bool CanPay(int price)
        {
            if (Money >= price)
            {
                Money -= price;
                return true;
            }

            return false;
        }
    }

    class Car
    {
        public Car()
        {
            DetailProblem = CreateRandomProblem();
        }

        public Detail DetailProblem { get; private set; }

        public bool IsEquals(Detail detail)
        {
            return detail.Name == DetailProblem.Name;
        }

        public void ShowInformation()
        {
            Console.WriteLine($"этой машине требуется {DetailProblem.Name}");
        }

        public void RefreshDetail(Detail detailFresh)
        {
            Console.WriteLine("проблема решена");
            DetailProblem = detailFresh;
            Console.ReadLine();
        }

        private Detail CreateRandomProblem()
        {
            Random random = new Random();
            Detail[] details = new Detail[9]
            {
                new Oil(),
                new Engine(),
                new Filter(),
                new Grenade(),
                new Lamp(),
                new Bumper(),
                new Belt(),
                new Pump(),
                new Seal()
            };
            return details[random.Next(details.Length)];
        }
    }

    class AutoService
    {
        private static int _marginForError;
        private Random _random = new Random();
        private Queue<Client> _clients = new Queue<Client>();
        private Warehouse _warehouse;

        public AutoService()
        {
            int countClientsMin = 3;
            int countClientsMax = 10;
            _marginForError = 3;
            CreateQueue(countClientsMin, countClientsMax);
            _warehouse = new Warehouse();
        }

        public int Cash { get; private set; }

        public void Work()
        {
            char symbolMenu = '_';
            int countSymbolMenu = 25;

            while (CanContinueWorking())
            {
                _warehouse.ShowInformation();
                Console.WriteLine(new string(symbolMenu, countSymbolMenu));
                Console.WriteLine("клиент с такой проблемой");
                Client clientProcessing = _clients.Dequeue();
                clientProcessing.Car.ShowInformation();
                Detail detailNeed;

                if (TryGetDetail(out detailNeed))
                {
                    int price = CalculatePrice(detailNeed);
                    Console.WriteLine($"цена ремонта - {price}");

                    if (clientProcessing.Car.IsEquals(detailNeed))
                    {
                        if (clientProcessing.CanPay(price))
                        {
                            clientProcessing.Car.RefreshDetail(detailNeed);
                            Cash += price;
                            Console.WriteLine($"вы заработали + {price}, Ваш баланс: {Cash}");
                        }
                        else
                        {
                            Console.WriteLine("иди заработай денег");
                            _warehouse.RefundUnpaidDetail(detailNeed);
                        }

                    }
                    else
                    {
                        Console.WriteLine("вы чего наделали?!");
                        PayForMistake(detailNeed, clientProcessing, price);
                    }
                }
                else
                {
                    Console.WriteLine("вы совершили ошибку. придется заплатить");
                    PayForMistake(clientProcessing.Car.DetailProblem, clientProcessing, CalculatePrice(clientProcessing.Car.DetailProblem));
                }

                Console.ReadLine();
                Console.Clear();
            }
        }

        private void PayForMistake(Detail detailNeed, Client client, int price)
        {
            if (_warehouse.TakeBySample(detailNeed) != null)
            {
                client.Car.RefreshDetail(detailNeed);
                Cash -= price;
                Console.WriteLine($"Ваш баланс: {Cash}");
            }
            else
            {
                int lossFormal = 50;
                Console.WriteLine("жди следующую поставку");
                Cash -= lossFormal;
            }
        }

        private bool CanContinueWorking()
        {
            if (_clients.Count > 0)
            {
                if (Cash < 0)
                {
                    _marginForError--;
                    Console.WriteLine($"у вас осталось - {_marginForError} попыток");
                }

                if (_marginForError == 0)
                {
                    Console.WriteLine("вы раздалбай");
                    return false;
                }

                return true;
            }

            Console.WriteLine($"вы заработали {Cash}");
            return false;
        }

        private int CalculatePrice(Detail detail)
        {
            int easy = 500;
            int medium = 1000;
            int hard = 2500;
            int imposible = 10000;
            int priceJob = 0;

            if (detail.Price <= easy)
            {
                priceJob = _random.Next(easy);
            }
            else if (detail.Price >= easy && detail.Price < medium)
            {
                priceJob = _random.Next(easy, medium);
            }
            else if (detail.Price >= medium && detail.Price < hard)
            {
                priceJob = _random.Next(medium, hard);
            }
            else if (detail.Price >= hard)
            {
                Console.WriteLine("проще было бы выбросить");
                priceJob = _random.Next(hard, imposible);
            }

            Console.WriteLine($"стоимость детали - {detail.Price}, стоимость работы - {priceJob}");
            return priceJob + detail.Price;
        }

        private bool TryGetDetail(out Detail detail)
        {
            Console.WriteLine("введите номер детали в базе");
            string input = Console.ReadLine();

            if (int.TryParse(input, out int value))
            {
                if (value < _warehouse.CountDetails)
                {
                    detail = _warehouse.TakeByIndex(value);
                    return true;
                }
            }

            detail = null;
            return false;
        }

        private void CreateQueue(int countClientsMin, int countClientsMax)
        {
            int countRandom = _random.Next(countClientsMin, countClientsMax);

            for (int i = 0; i < countRandom; i++)
            {
                _clients.Enqueue(new Client());
            }
        }
    }

    class Warehouse
    {
        private List<Detail> _details = new List<Detail>();
        private Random _random = new Random();

        public Warehouse()
        {
            int countRandom = SelectedCountDetails();
            FillList(countRandom);
            CountDetails = _details.Count;
        }

        public int CountDetails { get; private set; }

        public void ShowInformation()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write($"{i})");
                _details[i].ShowInformation();
            }
        }

        public void RefundUnpaidDetail(Detail detail)
        {
            _details.Add(detail);
            CountDetails++;
        }

        public Detail TakeByIndex(int index)
        {
            Detail detail = _details[index];
            _details.RemoveAt(index);
            CountDetails--;
            return detail;
        }

        public Detail TakeBySample(Detail detailSearch)
        {
            if (_details.Contains(detailSearch))
            {
                _details.Remove(detailSearch);
                CountDetails--;
                return detailSearch;
            }
            else
            {
                return null;
            }

        }

        private void FillList(int countRandom)
        {
            Detail[] details =
            {
                new Oil(),
                new Engine(),
                new Filter(),
                new Grenade(),
                new Lamp(),
                new Bumper(),
                new Belt(),
                new Pump(),
                new Seal()
            };

            for (int i = 0; i < countRandom; i++)
            {
                _details.Add(details[_random.Next(details.Length)]);
            }
        }

        private int SelectedCountDetails()
        {
            int countMin = 10;
            int countMax = 30;
            return _random.Next(countMin, countMax);
        }
    }

    class Detail
    {
        private Random _random = new Random((int)DateTime.Now.Ticks);

        public string Name { get; protected set; }
        public int Price { get; private set; }

        public void ShowInformation()
        {
            Console.WriteLine($"деталь - {Name}, цена - {Price}");
        }

        protected void SelectedPrice(int priceMin, int priceMax)
        {
            Price = _random.Next(priceMin, priceMax);
        }
    }

    class Oil : Detail
    {
        public Oil()
        {
            int priceMin = 250;
            int priceMax = 750;
            Name = "масло";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Engine : Detail
    {
        public Engine()
        {
            int priceMin = 45000;
            int priceMax = 100000;
            Name = "ГБЦ";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Filter : Detail
    {
        public Filter()
        {
            int priceMin = 200;
            int priceMax = 500;
            Name = "маслянный фильтр";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Grenade : Detail
    {
        public Grenade()
        {
            int priceMin = 1500;
            int priceMax = 3000;
            Name = "внутренний шрус";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Lamp : Detail
    {
        public Lamp()
        {
            int priceMin = 50;
            int priceMax = 150;
            Name = "лампочка";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Bumper : Detail
    {
        public Bumper()
        {
            int priceMin = 3500;
            int priceMax = 5000;
            Name = "бампер";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Belt : Detail
    {
        public Belt()
        {
            int priceMin = 2500;
            int priceMax = 5000;
            Name = "ремень ГРМ";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Pump : Detail
    {
        public Pump()
        {
            int priceMin = 2000;
            int priceMax = 4000;
            Name = "помпа";
            SelectedPrice(priceMin, priceMax);
        }
    }

    class Seal : Detail
    {
        public Seal()
        {
            int priceMin = 500;
            int priceMax = 1000;
            Name = "сальник";
            SelectedPrice(priceMin, priceMax);
        }
    }
}
