using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        const string CommandAdd = "1";
        const string CommandStop = "2";
        const string CommandExit = "3";

        static void Main()
        {
            Deck deck = new Deck();
            Player player = new Player();
            bool isWorking = true;
            deck.CreateBaseCards();
            deck.MixingCards();

            while (isWorking)
            {
                Console.WriteLine($"{CommandAdd} - добавить карту,{CommandStop} - стоп;{CommandExit} - выйти");
                string inputPlayer = Console.ReadLine();

                switch (inputPlayer)
                {
                    case CommandAdd:
                        player.PullCard(deck.GetMixingCards());
                        break;

                    case CommandStop:
                        isWorking = player.StopParty();
                        break;

                    case CommandExit:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine("ошибка ввода");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Card
    {
        public Card(string name, int value)
        {
            Name = name;
            Value = value;
        }

        public string Name { get; private set; }
        public int Value { get; private set; }
    }

    class Deck
    {
        private Stack<Card> _cardsMixing = new Stack<Card>();
        private List<Card> _cardsBase = new List<Card>();
        private string[] _suit = { "pike_", "cross_", "hearts_", "tambourine_" };
        private string[] _value = { "6", "7", "8", "9", "10", "J", "Q", "K", "A" };

        public Stack<Card> GetMixingCards()
        {
            return _cardsMixing;
        }

        public void CreateBaseCards()
        {
            const string Jack = "J";
            const string Queen = "Q";
            const string King = "K";
            const string Ace = "A";
            int number = 0;
            int countSuit = 4;

            for (int i = 0; i < countSuit; i++)
            {
                for (int y = 0; y < _value.Length; y++)
                {
                    string tempCard = _suit[i] + _value[y];

                    if (int.TryParse(_value[y], out int value))
                    {
                        number = value;
                    }
                    else
                        switch (_value[y])
                        {
                            case Jack:
                                number = 8;
                                break;

                            case Queen:
                                number = 9;
                                break;

                            case King:
                                number = 10;
                                break;

                            case Ace:
                                number = 11;
                                break;
                        }

                    _cardsBase.Add(new Card(tempCard, number));
                }
            }
        }

        public void MixingCards()
        {
            Random random = new Random();
            int indexRandomMin = 0;
            int indexRandomMax = _cardsBase.Count;
            int countChecks = 50;

            for (int i = 0; i < countChecks; i++)
            {
                int value = random.Next(indexRandomMin, indexRandomMax);

                if (!_cardsMixing.Contains(_cardsBase[value]))
                {
                    _cardsMixing.Push(_cardsBase[value]);
                }
            }
        }
    }

    class Player
    {
        private List<Card> _deckPersonal = new List<Card>();
        private int _cursorPositionX = 0;
        private int _cursorPositionY = 10;
        private int _scoreWinner = 21;
        public int Score { get; private set; }

        public void PullCard(Stack<Card> cards)
        {
            Console.SetCursorPosition(_cursorPositionX, _cursorPositionY);
            Console.WriteLine($"ваша карта: {cards.Peek().Name}");
            _deckPersonal.Add(cards.Peek());
            Score += cards.Pop().Value;
            Console.WriteLine($"ваш счет: {Score}");
        }

        public bool StopParty()
        {
            Console.WriteLine($"ваш счет: {Score}");
            Console.WriteLine("ваши карты");
            ShowPersonalDeck();

            if (Score <= _scoreWinner && Score >= ScorePersonalMin())
            {
                Console.WriteLine($"противник набрал: {ScorePersonalMin()}");
                Console.WriteLine("вы победили");
            }
            else
            {
                Console.WriteLine("вы проиграли");
            }

            return false;
        }

        private void ShowPersonalDeck()
        {
            for (int i = 0; i < _deckPersonal.Count; i++)
            {
                Console.WriteLine(_deckPersonal[i].Name);
            }
        }

        private int ScorePersonalMin()
        {
            Random random = new Random();
            int randomValueMin = _scoreWinner / 2;
            int randomValueMax = _scoreWinner;
            return random.Next(randomValueMin, randomValueMax);
        }
    }
}
