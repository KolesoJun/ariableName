using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            User user = new User();
            int countAnimals = 25;
            int countAviary = 7;
            ZooPark zooPark = new ZooPark(countAnimals, countAviary);
            zooPark.Work(user);
        }
    }

    class ZooPark
    {
        private int _countAnimals;
        private List<Aviary> _aviaries = new List<Aviary>();

        public ZooPark(int count, int countAviaries)
        {
            if (count > 0 && countAviaries > 0)
            {
                _countAnimals = count;
                CountAviaries = countAviaries;
            }

            CreateAviaries();
            SortAnimalsToAviaries();
        }

        public int CountAviaries { get; private set; }

        public void Work(User user)
        {
            int choseAviarie = 1;
            int exit = 2;
            
            while (user.IsWatching)
            {
                Console.WriteLine($"введите - {choseAviarie}, чтобы выбрать вольер. {exit}, чтобы выйти");
                int input = user.Input();

                if (input == choseAviarie)
                {
                    Console.WriteLine($"введите индекс вальера от 0 до {CountAviaries}");
                    int chose = user.Input();

                    if (chose >= 0 && chose <= CountAviaries)
                    {
                        _aviaries[chose].ShowInformation();
                    }
                }
                else if (input == exit)
                {
                    user.Exit();
                }

                Console.ReadLine();
                Console.Clear();
            }
        }

        private void CreateAviaries()
        {
            for (int i = 0; i < CountAviaries; i++)
            {
                _aviaries.Add(new Aviary());
            }
        }

        private void SortAnimalsToAviaries()
        {
            Random random = new Random();

            for (int i = 0; i < _countAnimals; i++)
            {
                Animal animal = new Animal(random);

                foreach (Aviary aviary in _aviaries)
                {
                    if (aviary.Name != animal.Name)
                    {
                        if (aviary.Name == "пустой")
                        {
                            aviary.AddAnimals(animal);
                            animal = null;
                            break;
                        }
                    }
                    else
                    {
                        break;
                    }
                }

                if (animal != null)
                {
                    foreach (Aviary aviary in _aviaries)
                    {
                        if (aviary.Name == animal.Name)
                        {
                            aviary.AddAnimals(animal);
                            break;
                        }
                    }
                }
            }
        }
    }

    class User
    {
        public User()
        {
            IsWatching = true;
        }

        public bool IsWatching { get; private set; }

        public void Exit()
        {
            IsWatching = true;
        }

        public int Input()
        {
            int error = -1;
            string command = Console.ReadLine();

            if (int.TryParse(command, out int value))
                return value;

            return error;
        }
    }

    class Aviary
    {
        private List<Animal> _animals = new List<Animal>();

        public Aviary(string name = "пустой")
        {
            Name = name;
        }

        public string Name { get; private set; }
        public int CountAnimals { get; private set; }

        public void AddAnimals(Animal animal)
        {
            _animals.Add(animal);
            Name = animal.Name;
            CountAnimals = _animals.Count;
        }

        public void ShowInformation()
        {
            Console.WriteLine($"этот вольер содержит - {Name}, в нем {_animals.Count} животных");

            foreach (Animal animal in _animals)
            {
                if (animal!=null)
                {
                    animal.ShowInformation();
                }
            }
        }
    }

    class Animal
    {
        private List<string> _genus = new List<string>();
        private List<string> _sound = new List<string>();

        public Animal(Random random)
        {
            FillVariatsName();
            FillVariatsSound();
            Gender = DeterminadeGender(random);
            Name = DeterminadeName(random);
            Sound = DeterminadeSound(Name);
        }

        public string Name { get; private set; }
        public char Gender { get; private set; }
        public string Sound { get; private set; }

        public void ShowInformation()
        {
            Console.WriteLine($"я - {Name}, пол - {Gender}, издаю звук -{Sound}");
        }

        private char DeterminadeGender(Random random)
        {
            int randomindex = 10;
            int half = 2;
            char woman = 'F';
            char man = 'M';

            if (random.Next(randomindex) <= randomindex / half)
                return woman;
            else
                return man;
        }

        private void FillVariatsSound()
        {
            _sound.Add("р-р-р");
            _sound.Add("ну шеф!!!");
            _sound.Add("если волк молчит, лучше его не перебивать");
            _sound.Add("свинья, бл@!!!");
            _sound.Add("у-а-у-а");
            _sound.Add("шик-ширик");
            _sound.Add("цирк");
        }

        private void FillVariatsName()
        {
            _genus.Add("лев");
            _genus.Add("свинья");
            _genus.Add("волк");
            _genus.Add("слон");
            _genus.Add("обезьяна");
            _genus.Add("попугай");
            _genus.Add("страус");
        }

        private string DeterminadeName(Random random)
        {
            return _genus[random.Next(_genus.Count)];
        }

        private string DeterminadeSound(string name)
        {
            int index = _genus.IndexOf(name);
            return _sound[index];
        }
    }
}
